const Discord = require("discord.js");
const fs = require("fs");
const ms = require("ms");
var mongoose = require("mongoose");
mongoose.Promise = global.Promise;mongoose.connect("mongodb://root:retrobot2018@ds239071.mlab.com:39071/retrobotdb");
var User = require('./../schemas/user_model.js');
var Item = require('./../schemas/shop_model.js');

function isNumeric(value) {
	return /^\d+$/.test(value);
}

function random(min, max) {
	var result = Math.floor(Math.random() * (max - min + 1)) + min;
	return (result);
}

function playcf(user, toPlay, message){

	var user_obj = User.findOne({userID: message.member.id}, function(err, found_user){
		if (err)
			console.log("WTF there is an error: " + err);
		else {
			if (!user_obj)
				console.log("User not found");
			else {
				message.reply("–∏–≥—Ä–∞–µ–º!");
				
//				if (user_obj.)
				//–∑–∞–ø—É—Å–∫–∞—é –∏–≥—Ä—É, –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è—é –∏ –æ—Ç–≤–µ—á–∞—é –≤ —á–∞—Ç
				found_user.save(function(err, updatedObj){
				if (err)
					console.log(err);
				});
			}
		}
	});
	return message.reply("–¥–µ—Ä–∂–∏, –≤–æ—Ç —Ç–µ–±–µ " + item.itemName);
}

module.exports.run = async (bot, message, args) => {

	//message.delete().catch(O_o=>{});

	var user_obj = await User.findOne({userID: message.member.id}, function(err, found_user){});

	if (typeof user_obj === 'undefined' || user_obj === null)
		return message.reply("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ");

	//—á–µ–∫–∞–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –ö—É—Ä–æ—á–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ

	if (user_obj.inv.includes("–ö—É—Ä–æ—á–∫–∞ üêî") == false)
		return message.reply("—É —Ç–µ–±—è –Ω–µ—Ç—É üêî");

	//—á–µ–∫–∞–µ–º —Å–¥–µ–ª–∞–ª –ª–∏ —Ç–∏–ø—É–ª—è —Å—Ç–∞–≤–∫—É –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –Ω–µ–≥–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–∑–µ

	if (args[0] && isNumeric(args[0]) == true){

		let toPlay = Number(args[0]);
		if (toPlay >= 100){
			if ((user_obj.retrocoinCash - toPlay) >= 0){
				playcf(user_obj, toPlay, message);
			}
			else{
				return message.reply("—É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ —ç—Ç–æ —Ä–µ—Ç—Ä–∏–∫–æ–≤!");
			}
		}
		else{
			return message.reply("–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–∫–∞ - 100 —Ä–µ—Ç—Ä–∏–∫–æ–≤!");
		}
	}
	return message.reply("–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –æ—Ç 100 —Ä–µ—Ç—Ä–∏–∫–æ–≤ –∏ –≤—ã—à–µ!")
}

module.exports.help = {
	name: "cf"
}