{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/alexismurer/Desktop/Ouroboros/Coding/RetroBot/server/app.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"server/app.js","filename":"/Users/alexismurer/Desktop/Ouroboros/Coding/RetroBot/server/app.js","passPerPreset":false,"envName":"development","cwd":"/Users/alexismurer/Desktop/Ouroboros/Coding/RetroBot","root":"/Users/alexismurer/Desktop/Ouroboros/Coding/RetroBot","presets":[],"generatorOpts":{"filename":"/Users/alexismurer/Desktop/Ouroboros/Coding/RetroBot/server/app.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/app.js"}},"code":"const module1 = module;\nlet Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet onPageLoad;\nmodule1.watch(require(\"meteor/server-render\"), {\n  onPageLoad(v) {\n    onPageLoad = v;\n  }\n\n}, 1);\nMeteor.startup(() => {\n  // Code to run on server startup.\n  console.log(`Greetings from ${module.id}!`);\n  console.log(\"DB1\");\n\n  const botconfig = require(\"../botconfig.json\");\n\n  const Discord = require(\"discord.js\");\n\n  const fs = require(\"fs\");\n\n  const bot = new Discord.Client({\n    disableEveryone: true\n  });\n\n  const ms = require(\"ms\");\n\n  var CronJob = require('cron').CronJob;\n\n  bot.commands = new Discord.Collection();\n  console.log(\"DB2\"); //  mongoose.Promise = global.Promise;mongoose.connect(\"mongodb://root:retrobot2018@ds239071.mlab.com:39071/retrobotdb\");\n\n  fs.readdir(\"../commands\", (err, files) => {\n    console.log(\"DB3\");\n    if (err) console.log(err);else console.log(\"Files: \" + files);\n    console.log(\"DB4\");\n\n    if (typeof files !== 'undefined') {\n      var jsfile = files.filter(f => f.split(\".\").pop() === \"js\");\n    }\n\n    console.log(\"DB5\");\n\n    if (jsfile && jsfile.length <= 0) {\n      console.log(\"[app.js] –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\");\n      return;\n    }\n\n    console.log(\"DB6\");\n    jsfile.forEach((f, i) => {\n      let props = require(`../commands/${f}`);\n\n      console.log(`[app.js] –ö–æ–º–º–∞–Ω–¥–∞ ${f} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);\n      bot.commands.set(props.help.name, props);\n    });\n  });\n\n  function idle_repeat() {\n    console.log(\"[app.js] New CronJob started\");\n    var cronindex = 1;\n\n    var CronJob = require('cron').CronJob;\n\n    new CronJob('0 * * * * *', function () {\n      let i = cronindex == 1 ? \" minute\" : \" minutes\";\n      console.log(\"[app.js] CronJob: Bot is online for \" + cronindex + i);\n      cronindex++;\n    }, null, true, 'Europe/Paris'); // Seconds: 0-59\n    // Minutes: 0-59\n    // Hours: 0-23\n    // Day of Month: 1-31\n    // Months: 0-11 (Jan-Dec)\n    // Day of Week: 0-6 (Sun-Sat)\n  }\n\n  bot.on(\"ready\", () => Promise.asyncApply(() => {\n    console.log(`[app.js] ${bot.user.username} –æ–Ω–ª–∞–π–Ω`);\n    bot.user.setPresence({\n      game: {\n        name: \"–∑–∞ Retro Valley!\",\n        type: 3\n      }\n    });\n    idle_repeat();\n  }));\n  bot.on(\"message\", message => Promise.asyncApply(() => {\n    if (message.author.bot) {\n      if (message.member != null) {\n        if (message.member.roles.some(r => [\"Mantaro\"].includes(r.name))) {\n          if (message.channel.name == \"üìµ–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è\") {\n            message.delete().then(msg => console.log(`–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.author.username}`)).catch(console.error);\n          }\n        }\n      }\n\n      return;\n    }\n\n    if (message.channel.type === \"dm\") return;\n    let prefix = botconfig.prefix;\n\n    if (message.content.charAt(0) === prefix) {\n      let messageArray = message.content.split(\" \");\n      let cmd = messageArray[0];\n      let args = messageArray.slice(1);\n      let commandfile = bot.commands.get(cmd.slice(prefix.length));\n\n      if (commandfile) {\n        commandfile.run(bot, message, args);\n      }\n    } else if (message.content.charAt(0) === \"!\" && message.content.charAt(1) === \"w\" && message.content.charAt(2) === \"a\" && message.content.charAt(3) === \"r\" && message.content.charAt(4) === \"n\") {\n      let messageArray = message.content.split(\" \");\n      let cmd = \"!warn2\";\n      let args = messageArray.slice(1);\n      let commandfile = bot.commands.get(cmd.slice(prefix.length));\n\n      if (commandfile) {\n        commandfile.run(bot, message, args);\n      }\n    } else if (message.content.charAt(0) === \"?\" && message.content.charAt(1) === \"s\" && message.content.charAt(2) === \"e\" && message.content.charAt(3) === \"l\" && message.content.charAt(4) === \"l\" && message.content.charAt(5) === \"-\" && message.content.charAt(6) === \"i\" && message.content.charAt(7) === \"t\" && message.content.charAt(8) === \"e\" && message.content.charAt(9) === \"m\") {\n      let messageArray = message.content.split(\" \");\n      let cmd = \"!sellscan\";\n      let args = messageArray.slice(1);\n      let commandfile = bot.commands.get(cmd.slice(prefix.length));\n\n      if (commandfile) {\n        commandfile.run(bot, message, args);\n      }\n    } else if (message.content.charAt(0) === \"?\" && message.content.charAt(1) === \"s\" && message.content.charAt(2) === \"e\" && message.content.charAt(3) === \"l\" && message.content.charAt(4) === \"l\") {\n      let messageArray = message.content.split(\" \");\n      let cmd = \"!sellscan\";\n      let args = messageArray.slice(1);\n      let commandfile = bot.commands.get(cmd.slice(prefix.length));\n\n      if (commandfile) {\n        commandfile.run(bot, message, args);\n      }\n    } else {\n      let cmd = \"scanuser\";\n      let commandfile = bot.commands.get(cmd);\n\n      if (commandfile) {\n        commandfile.run(bot, message);\n      }\n    }\n  }));\n  bot.login(process.env.BOT_TOKEN);\n});\nonPageLoad(sink => {\n  // Code to run on every request.\n  sink.renderIntoElementById(\"server-render-target\", `Server time: ${new Date()}`);\n});","map":{"version":3,"sources":["server/app.js"],"names":["module1","module","Meteor","watch","require","v","onPageLoad","startup","console","log","id","botconfig","Discord","fs","bot","Client","disableEveryone","ms","CronJob","commands","Collection","readdir","err","files","jsfile","filter","f","split","pop","length","forEach","i","props","set","help","name","idle_repeat","cronindex","on","user","username","setPresence","game","type","message","author","member","roles","some","r","includes","channel","delete","then","msg","catch","error","prefix","content","charAt","messageArray","cmd","args","slice","commandfile","get","run","login","process","env","BOT_TOKEN","sink","renderIntoElementById","Date"],"mappings":"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","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { onPageLoad } from \"meteor/server-render\";\n\nMeteor.startup(() => {\n  // Code to run on server startup.\n  console.log(`Greetings from ${module.id}!`);\n\n  console.log(\"DB1\");\n\n  const botconfig = require(\"../botconfig.json\");\n  const Discord = require(\"discord.js\");\n  const fs = require(\"fs\");\n  const bot = new Discord.Client({disableEveryone: true});\n  const ms = require(\"ms\");\n  var CronJob = require('cron').CronJob;\n  bot.commands = new Discord.Collection();\n  console.log(\"DB2\");\n\n\n//  mongoose.Promise = global.Promise;mongoose.connect(\"mongodb://root:retrobot2018@ds239071.mlab.com:39071/retrobotdb\");\n\n  fs.readdir(\"../commands\", (err, files) => {\n    console.log(\"DB3\");\n    if (err)\n      console.log(err);\n    else\n      console.log(\"Files: \" + files);\n    console.log(\"DB4\");\n    if(typeof files !== 'undefined'){\n      var jsfile = files.filter(f => f.split(\".\").pop() === \"js\");\n    }\n    console.log(\"DB5\");\n    if (jsfile && jsfile.length <= 0) {\n      console.log(\"[app.js] –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\");\n      return;\n    }\n    console.log(\"DB6\");\n    jsfile.forEach((f, i) => {\n      let props = require(`../commands/${f}`);\n      console.log(`[app.js] –ö–æ–º–º–∞–Ω–¥–∞ ${f} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);\n      bot.commands.set(props.help.name, props);\n    })\n  })\n\n  function idle_repeat(){\n    console.log(\"[app.js] New CronJob started\");\n\n    var cronindex = 1;\n    var CronJob = require('cron').CronJob;\n    new CronJob('0 * * * * *', function() {\n      let i = (cronindex == 1) ? \" minute\" : \" minutes\";\n      console.log(\"[app.js] CronJob: Bot is online for \" + cronindex + i);\n      cronindex++;\n    }, null, true, 'Europe/Paris');\n    // Seconds: 0-59\n    // Minutes: 0-59\n    // Hours: 0-23\n    // Day of Month: 1-31\n    // Months: 0-11 (Jan-Dec)\n    // Day of Week: 0-6 (Sun-Sat)\n  }\n\n  bot.on(\"ready\", async () => {\n    console.log(`[app.js] ${bot.user.username} –æ–Ω–ª–∞–π–Ω`);\n    bot.user.setPresence({\n      game: {\n        name: \"–∑–∞ Retro Valley!\",\n        type: 3\n      }\n    });\n    idle_repeat();\n  });\n\n  bot.on(\"message\", async message => {\n\n    if(message.author.bot){\n      if(message.member != null){\n        if(message.member.roles.some(r=>[\"Mantaro\"].includes(r.name))){\n          if(message.channel.name == \"üìµ–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è\"){\n            message.delete()\n            .then(msg => console.log(`–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.author.username}`))\n            .catch(console.error);\n          }\n        }\n      }\n      return;\n    }\n\n    if(message.channel.type === \"dm\")\n      return;\n\n    let prefix = botconfig.prefix;\n    if (message.content.charAt(0) === prefix){\n      let messageArray = message.content.split(\" \");\n      let cmd = messageArray[0];\n      let args = messageArray.slice(1);\n      let commandfile = bot.commands.get(cmd.slice(prefix.length));\n\n      if(commandfile){\n        commandfile.run(bot, message, args);\n      }\n    }\n    else if (message.content.charAt(0) === \"!\" && message.content.charAt(1) === \"w\" && message.content.charAt(2) === \"a\"\n     && message.content.charAt(3) === \"r\" && message.content.charAt(4) === \"n\"){\n      let messageArray = message.content.split(\" \");\n      let cmd = \"!warn2\";\n      let args = messageArray.slice(1);\n      let commandfile = bot.commands.get(cmd.slice(prefix.length));\n\n      if(commandfile){\n        commandfile.run(bot, message, args);\n      }\n    }\n    else if (message.content.charAt(0) === \"?\" && message.content.charAt(1) === \"s\" && message.content.charAt(2) === \"e\"\n     && message.content.charAt(3) === \"l\" && message.content.charAt(4) === \"l\" && message.content.charAt(5) === \"-\"\n     && message.content.charAt(6) === \"i\" && message.content.charAt(7) === \"t\" && message.content.charAt(8) === \"e\"\n     && message.content.charAt(9) === \"m\"){\n      let messageArray = message.content.split(\" \");\n      let cmd = \"!sellscan\";\n      let args = messageArray.slice(1);\n      let commandfile = bot.commands.get(cmd.slice(prefix.length));\n\n      if(commandfile){\n        commandfile.run(bot, message, args);\n      }\n    }\n    else if (message.content.charAt(0) === \"?\" && message.content.charAt(1) === \"s\" && message.content.charAt(2) === \"e\"\n     && message.content.charAt(3) === \"l\" && message.content.charAt(4) === \"l\"){\n      let messageArray = message.content.split(\" \");\n      let cmd = \"!sellscan\";\n      let args = messageArray.slice(1);\n      let commandfile = bot.commands.get(cmd.slice(prefix.length));\n\n      if(commandfile){\n        commandfile.run(bot, message, args);\n      }\n    }\n    else {\n      let cmd = \"scanuser\";\n      let commandfile = bot.commands.get(cmd);\n      if(commandfile){\n        commandfile.run(bot, message);\n      }\n    }\n  });\n\n  bot.login(process.env.BOT_TOKEN);\n\n\n});\n\nonPageLoad(sink => {\n  // Code to run on every request.\n  sink.renderIntoElementById(\n    \"server-render-target\",\n    `Server time: ${new Date}`\n  );\n});\n"]},"sourceType":"script","hash":"92f5270b40c7209871060c08c72e4a37a75a665f"}
